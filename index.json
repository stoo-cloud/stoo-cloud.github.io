[{"categories":null,"content":"What have we got After upgrading to the new Macbook Pro with the M1 Pro processor at the end of 2021, it became time to start using Python on it and do some work locally in a famililar environment. $ /echo $PATH /usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin $ which python /usr/bin/python $ python --version Python 2.7.18 While MacOS includes a version of Python I wanted a newer version and to keep it seperate from what Apple was using the other version for, and perhaps to have multiple environments for development. Git seems to be installed in MacOS Monterey and is a recent enough version to leave it as is for now. $ git --version git version 2.32.0 (Apple Git-132) I have decided to use Homebrew as the package manager for tools not included by Apple, and there will be many of these tools that can be easily installed when required. Homebrew has native support for the Apple Silicon CPU and hence the best option for my M1 Pro processor, plus it seems as easy as any other package manager I have used in the past. ","date":"2021-12-14","objectID":"/python-on-m1-native-macbook-pro/:1:0","tags":["homebrew","python","m1","macos"],"title":"Python on M1 native Macbook Pro 2021","uri":"/python-on-m1-native-macbook-pro/"},{"categories":null,"content":"Homebrew ","date":"2021-12-14","objectID":"/python-on-m1-native-macbook-pro/:2:0","tags":["homebrew","python","m1","macos"],"title":"Python on M1 native Macbook Pro 2021","uri":"/python-on-m1-native-macbook-pro/"},{"categories":null,"content":"Installing Homebrew The Instructions are easy enough to follow, with the requirements showing that Xcode will need to be installed. The only other main point is that it wants Borne-again shell (i.e. bash) to be the shell used for installation. I did not have issues using the now default zsh shell, other than having to rebuild the hash table (see note below). It seems to call bash to interpret the downloaded script anyway. Follow the instructions, and run the bash curl URL/install.sh command, which will do all the hard work and install everything under the path /opt/homebrew for Apple Silicon CPUs. Go forth and use the Homebrew installation docs: https://docs.brew.sh/Installation When opening up a new terminal, the zsh profile ~/.zprofile should set up the correct path from the installation. $ cat ~/.zprofile eval \"$(/opt/homebrew/bin/brew shellenv)\" alias ll=\"ls -l\" That last alias gives me Linux love to my Mac and helps with my typing muscle memory. ","date":"2021-12-14","objectID":"/python-on-m1-native-macbook-pro/:2:1","tags":["homebrew","python","m1","macos"],"title":"Python on M1 native Macbook Pro 2021","uri":"/python-on-m1-native-macbook-pro/"},{"categories":null,"content":"Python ","date":"2021-12-14","objectID":"/python-on-m1-native-macbook-pro/:3:0","tags":["homebrew","python","m1","macos"],"title":"Python on M1 native Macbook Pro 2021","uri":"/python-on-m1-native-macbook-pro/"},{"categories":null,"content":"Installing Python 3.9.9 or higher brew install python It really is that easy. ","date":"2021-12-14","objectID":"/python-on-m1-native-macbook-pro/:3:1","tags":["homebrew","python","m1","macos"],"title":"Python on M1 native Macbook Pro 2021","uri":"/python-on-m1-native-macbook-pro/"},{"categories":null,"content":"Checking the Python installation echo $PATH /opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin % for FILE in `which -a python3`; do echo -n \"$FILEis \"; $FILE --version; done /opt/homebrew/bin/python3 is Python 3.9.9 /usr/bin/python3 is Python 3.8.9 % for FILE in `which -a python`; do echo -n \"$FILEis \"; $FILE --version; done /opt/homebrew/bin/python is Python 3.9.9 /usr/bin/python is Python 2.7.18 Note: As mentioned, because I ran python earlier or its path was already cached in the zsh hash table of names, I was not seeing the new install version and was seeing the Apple version of python version. The hash table needs to be emptied and rebuilt, which is done easily with the following. hash -r Now we can see inside zsh that it is finding the intended version (not cashed in the hash). % for FILE in `which -a python3`; do echo -n \"$FILEis \"; $FILE --version; done /opt/homebrew/bin/python3 is Python 3.9.9 /usr/bin/python3 is Python 3.8.9 % for FILE in `which -a python`; do echo -n \"$FILEis \"; $FILE --version; done /opt/homebrew/bin/python is Python 3.9.9 /usr/bin/python is Python 2.7.18 ","date":"2021-12-14","objectID":"/python-on-m1-native-macbook-pro/:4:0","tags":["homebrew","python","m1","macos"],"title":"Python on M1 native Macbook Pro 2021","uri":"/python-on-m1-native-macbook-pro/"},{"categories":null,"content":"Change some links The last thing I did was to assume we are always running the command ‚Äúpython3‚Äù even when we just run ‚Äúpython‚Äù. I have switched my thinking to be in python3 unless I specify the path to Python 2. So I have linked it as below. $ cd /opt/homebrew/bin $ ls -l $ ln -s python3 python $ ln -s python3-config python-config $ ln -s pip3 pip Don‚Äôt forget to re-hash in the zsh shell again. $ hash -r So now we have the everything ready, a final check. % which python3 /opt/homebrew/bin/python3 % which python /opt/homebrew/bin/python $ for FILE in `which -a python3`; do echo -n \"$FILEis \"; $FILE --version; done /opt/homebrew/bin/python3 is Python 3.9.9 /usr/bin/python3 is Python 3.8.9 % for FILE in `which -a python`; do echo -n \"$FILEis \"; $FILE --version; done /opt/homebrew/bin/python is Python 3.9.9 /usr/bin/python is Python 2.7.18 Thats is it, time to go do some Python 3 programming! ","date":"2021-12-14","objectID":"/python-on-m1-native-macbook-pro/:4:1","tags":["homebrew","python","m1","macos"],"title":"Python on M1 native Macbook Pro 2021","uri":"/python-on-m1-native-macbook-pro/"},{"categories":null,"content":"About Stoo üëã Hi, I‚Äôm Stoo and I am exploring devops and architecture in the Cloud ‚òÅÔ∏è üëÄ I‚Äôm interested in Google Cloud Platform and have the GCP Professtional Cloud Architect certification. üå± I‚Äôm currently studying GCP Professional Network Engineer and GCP Professional Devops Engineer. I have been running Linux and Gnome as a work desktop for 20+ years, and have been using MacOs at home for music production and fun. ","date":"0001-01-01","objectID":"/about/:0:0","tags":null,"title":"","uri":"/about/"}]